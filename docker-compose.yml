version: '3.9'

services:
  # ============================================================================
  # DATABASES
  # ============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: mbi-postgres
    environment:
      POSTGRES_USER: mbi_user
      POSTGRES_PASSWORD: mbi_password
      POSTGRES_DB: mbi_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mbi_user -d mbi_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mbi-network

  # ============================================================================
  # CACHE & FEATURE STORE
  # ============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: mbi-redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mbi-network

  # ============================================================================
  # MESSAGE BROKER
  # ============================================================================
  
  kafka:
    image: bitnami/kafka:3.6
    container_name: mbi-kafka
    environment:
      # KRaft mode (no Zookeeper)
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Topic auto-creation
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_LOG_RETENTION_HOURS: 168  # 7 days
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mbi-network

  # ============================================================================
  # VECTOR DATABASE (RAG)
  # ============================================================================
  
  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: mbi-chroma
    environment:
      CHROMA_SERVER_AUTH_CREDENTIALS: "admin:admin"
      CHROMA_SERVER_AUTH_PROVIDER: "chromadb.auth.basic_authn.BasicAuthenticationServerProvider"
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mbi-network

  # ============================================================================
  # WORKFLOW ORCHESTRATION
  # ============================================================================
  
  prefect-server:
    image: prefecthq/prefect:2-python3.11
    container_name: mbi-prefect
    command: prefect server start --host 0.0.0.0
    environment:
      PREFECT_UI_URL: http://localhost:4200/api
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://mbi_user:mbi_password@postgres:5432/mbi_db
    ports:
      - "4200:4200"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mbi-network

  # ============================================================================
  # MONITORING
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: mbi-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mbi-network

  grafana:
    image: grafana/grafana:latest
    container_name: mbi-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mbi-network

  # ============================================================================
  # BACKEND (Optional - for containerized development)
  # ============================================================================
  
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: mbi-backend
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
  #   environment:
  #     DATABASE_URL: postgresql+asyncpg://mbi_user:mbi_password@postgres:5432/mbi_db
  #     REDIS_URL: redis://redis:6379/0
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./backend:/app
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - mbi-network

  # ============================================================================
  # FRONTEND (Optional - for containerized development)
  # ============================================================================
  
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: mbi-frontend
  #   command: npm run dev
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://localhost:8000/api/v2
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   depends_on:
  #     - backend
  #   networks:
  #     - mbi-network

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  mbi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
